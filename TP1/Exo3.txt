--------------- A ---------------

SousSeqMilieu(Tableau,k,l)
VAR
	element := milieu du tableau
	temporaire := Tableau[element]
	resultat := temporaire
	
DEBUT
	POUR i ALLANT DE milieu de la sequence A k
		temporaire := temporaire + Tableau[i];
		SI temporaire > resultat
			resultat := temporaire
		FINSI
	FINPOUR
	
	temporaire := resultat
	
	SI (l - k > 1)
		POUR i ALLANT DE milieu de la sequence A l
			temporaire := temporaire + Tableau[i];
			SI temporaire > resultat
				resultat := temporaire
			FINSI
		FINPOUR
	FINSI

	RETOURNER resultat
FIN



SousSeq(Tableau,k,l)
VAR
maximum := 0	
DEBUT
	SI (k == l)
	ALORS 
		maximum := Tableau[k] FINSI
	SINON	
		maximum := CalculerMaximum
			(
				SousSeq(Tableau, k, milieu de la sequence) ,
				SousSeqMilieu(Tableau, k, l) ,
				SousSeq(Tableau, milieu de la sequence +1, l)
			)
	FINSI
	
	RETOURNER maximum
FIN


void main (int argc, char *argv[])
{
	int i,Tab[argc-1];
	for(i=1 ; i < argc ; i++)		
		Tab[i-1]=atoi(argv[i]);	
			
	int *resultat;
	resultat=malloc(3);
	resultat=SousSeq(Tab,0,argc-2);
	
	//printf("%d %d %d\n",resultat[0],resultat[1],resultat[2]);
	printf("La sous sequence Max est de %d, la borne k est %d, la borne l est %d\n",resultat[0],resultat[1],resultat[2]);
	

}


--------------- B ---------------
la complexite de l'algo est comme suit :
	Complexite des deux appel recurssifs = 2 * C(n/2)
	Complexite de SousSeqMilieu = n
C(algo3) = 2C(n/2) + n = O(n * logn)

--------------- C ---------------

Fait ...

--------------- D ---------------

Sur 100 valeurs il met 0.002s en real time
